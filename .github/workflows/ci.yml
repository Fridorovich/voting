name: CI Pipeline
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    env:
      DATABASE_URL: sqlite:///./sqr_voting.db
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Clean Poetry environments
      run: |
        rm -rf ~/.poetry || true
        rm -rf ~/.cache/pypoetry || true
        rm -rf ~/.local/share/pypoetry || true
        rm -rf ~/.config/pypoetry || true
        rm -rf .venv || true
        mkdir -p ~/.config/pypoetry

    - name: Install Poetry
      run: |
        pip install poetry==1.5.1 --user
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi --with dev

    - name: Run tests with Poetry
      run: |
        poetry run pytest app/tests -v

    - name: Check PEP-8 style with flake8
      run: |
        poetry run flake8 app/ --count --show-source --statistics --max-line-length=88

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
    - name: Create .env
      run: |
        echo "SECRET_KEY=${{ env.SECRET_KEY }}" >> .env
        echo "DATABASE_URL=${{ env.DATABASE_URL }}" >> .env
        echo "ALGORITHM=${{ env.ALGORITHM }}" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=${{ env.ACCESS_TOKEN_EXPIRE_MINUTES }}" >> .env
        echo "REFRESH_TOKEN_EXPIRE_DAYS=${{ env.REFRESH_TOKEN_EXPIRE_DAYS }}" >> .env
    
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.23.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose

    - name: Build with Compose
      run: |
        docker-compose -f docker-compose.yml build

    - name: Push images
      if: github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
        docker-compose -f docker-compose.yml push
