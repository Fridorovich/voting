name: CI Pipeline
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    env:
      DATABASE_URL: sqlite:///./sqr_voting.db
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      DOCKER_BUILDKIT: 1
      COMPOSE_DOCKER_CLI_BUILD: 1

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Clean Poetry environments
      run: |
        rm -rf ~/.poetry || true
        rm -rf ~/.cache/pypoetry || true
        rm -rf ~/.local/share/pypoetry || true
        rm -rf ~/.config/pypoetry || true
        rm -rf .venv || true

    - name: Install Poetry
      run: |
        pip install poetry==1.5.1 --user
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Poetry
      run: |
        poetry config virtualenvs.in-project true

    - name: Install dependencies
      run: |
        poetry install --no-interaction --no-ansi --with dev

    - name: Run unit tests
      run: |
        poetry run pytest app/tests -v

    - name: Check PEP-8 style
      run: |
        poetry run flake8 app/ --count --show-source --statistics --max-line-length=88
        poetry run flake8 frontend/streamlit_app.py --count --show-source --statistics --max-line-length=88

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Set up Docker Compose
      uses: docker/setup-compose-action@v2 

    - name: Login to Docker Hub
      if: github.ref == 'refs/heads/main'
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    - name: Create .env
      run: |
        echo "SECRET_KEY=$SECRET_KEY" > .env
        echo "DATABASE_URL=$DATABASE_URL" >> .env
        echo "ALGORITHM=$ALGORITHM" >> .env
        echo "ACCESS_TOKEN_EXPIRE_MINUTES=$ACCESS_TOKEN_EXPIRE_MINUTES" >> .env
        echo "REFRESH_TOKEN_EXPIRE_DAYS=$REFRESH_TOKEN_EXPIRE_DAYS" >> .env

    - name: Build with Docker Compose
      run: |
        docker-compose build

    - name: Start and verify containers
      run: |
        docker-compose up -d
        # Проверка статуса контейнеров
        timeout 60 bash -c 'until [ "$(docker-compose ps --services --filter status=running | wc -l)" -eq "$(docker-compose ps --services | wc -l)" ]; do sleep 2; done'
        docker-compose ps

    - name: Run integration tests
      run: |
        poetry run pytest app/integration_tests -v

    - name: Stop containers
      if: always()
      run: |
        docker-compose down -v --remove-orphans

    - name: Push Docker images
      if: github.ref == 'refs/heads/main'
      run: |
        docker-compose push
